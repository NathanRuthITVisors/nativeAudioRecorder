{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"./utils/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./utils/invariant\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var StateUtils = {\n    get: function get(state, key) {\n      return state.routes.find(function (route) {\n        return route.key === key;\n      }) || null;\n    },\n    indexOf: function indexOf(state, key) {\n      return state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n    },\n    has: function has(state, key) {\n      return !!state.routes.some(function (route) {\n        return route.key === key;\n      });\n    },\n    push: function push(state, route) {\n      (0, _invariant.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n      var routes = state.routes.slice();\n      routes.push(route);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    pop: function pop(state) {\n      if (state.index <= 0) {\n        return state;\n      }\n\n      var routes = state.routes.slice(0, -1);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    jumpToIndex: function jumpToIndex(state, index) {\n      if (index === state.index) {\n        return state;\n      }\n\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s to jump to', index);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index\n      });\n    },\n    jumpTo: function jumpTo(state, key) {\n      var index = StateUtils.indexOf(state, key);\n      (0, _invariant.default)(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n      return StateUtils.jumpToIndex(state, index);\n    },\n    back: function back(state) {\n      var index = state.index - 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    forward: function forward(state) {\n      var index = state.index + 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    replaceAndPrune: function replaceAndPrune(state, key, route) {\n      var index = StateUtils.indexOf(state, key);\n      var replaced = StateUtils.replaceAtIndex(state, index, route);\n      return _objectSpread(_objectSpread({}, replaced), {}, {\n        routes: replaced.routes.slice(0, index + 1)\n      });\n    },\n    replaceAt: function replaceAt(state, key, route) {\n      var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var index = StateUtils.indexOf(state, key);\n      var nextIndex = preserveIndex ? state.index : index;\n      var nextState = StateUtils.replaceAtIndex(state, index, route);\n      nextState.index = nextIndex;\n      return nextState;\n    },\n    replaceAtIndex: function replaceAtIndex(state, index, route) {\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n      if (state.routes[index] === route && index === state.index) {\n        return state;\n      }\n\n      var routes = state.routes.slice();\n      routes[index] = route;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index,\n        routes: routes\n      });\n    },\n    reset: function reset(state, routes, index) {\n      (0, _invariant.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');\n      var nextIndex = index === undefined ? routes.length - 1 : index;\n\n      if (state.routes.length === routes.length && state.index === nextIndex) {\n        var compare = function compare(route, ii) {\n          return routes[ii] === route;\n        };\n\n        if (state.routes.every(compare)) {\n          return state;\n        }\n      }\n\n      (0, _invariant.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: nextIndex,\n        routes: routes\n      });\n    }\n  };\n  var _default = StateUtils;\n  exports.default = _default;\n});","lineCount":130,"map":[[11,0,1,0],[17,0,11,0],[17,6,11,6,"StateUtils"],[17,16,11,16],[17,19,11,19],[18,0,15,2,"get"],[18,4,15,2,"get"],[18,7,11,19],[18,22,15,6,"state"],[18,27,11,19],[18,29,15,13,"key"],[18,32,11,19],[18,34,15,18],[19,0,16,4],[19,13,16,11,"state"],[19,18,16,16],[19,19,16,17,"routes"],[19,25,16,11],[19,26,16,24,"find"],[19,30,16,11],[19,31,16,29],[19,41,16,29,"route"],[19,46,16,34],[20,0,16,34],[20,15,16,38,"route"],[20,20,16,43],[20,21,16,44,"key"],[20,24,16,38],[20,29,16,52,"key"],[20,32,16,34],[21,0,16,34],[21,7,16,11],[21,12,16,60],[21,16,16,4],[22,0,17,3],[22,5,11,19],[23,0,23,2,"indexOf"],[23,4,23,2,"indexOf"],[23,11,11,19],[23,30,23,10,"state"],[23,35,11,19],[23,37,23,17,"key"],[23,40,11,19],[23,42,23,22],[24,0,24,4],[24,13,24,11,"state"],[24,18,24,16],[24,19,24,17,"routes"],[24,25,24,11],[24,26,24,24,"findIndex"],[24,35,24,11],[24,36,24,34],[24,46,24,34,"route"],[24,51,24,39],[25,0,24,39],[25,15,24,43,"route"],[25,20,24,48],[25,21,24,49,"key"],[25,24,24,43],[25,29,24,57,"key"],[25,32,24,39],[26,0,24,39],[26,7,24,11],[26,8,24,4],[27,0,25,3],[27,5,11,19],[28,0,31,2,"has"],[28,4,31,2,"has"],[28,7,11,19],[28,22,31,6,"state"],[28,27,11,19],[28,29,31,13,"key"],[28,32,11,19],[28,34,31,18],[29,0,32,4],[29,13,32,11],[29,14,32,12],[29,15,32,13,"state"],[29,20,32,18],[29,21,32,19,"routes"],[29,27,32,13],[29,28,32,26,"some"],[29,32,32,13],[29,33,32,31],[29,43,32,31,"route"],[29,48,32,36],[30,0,32,36],[30,15,32,40,"route"],[30,20,32,45],[30,21,32,46,"key"],[30,24,32,40],[30,29,32,54,"key"],[30,32,32,36],[31,0,32,36],[31,7,32,13],[31,8,32,4],[32,0,33,3],[32,5,11,19],[33,0,40,2,"push"],[33,4,40,2,"push"],[33,8,11,19],[33,24,40,7,"state"],[33,29,11,19],[33,31,40,14,"route"],[33,36,11,19],[33,38,40,21],[34,0,41,4],[34,30,41,14,"StateUtils"],[34,40,41,24],[34,41,41,25,"indexOf"],[34,48,41,14],[34,49,41,33,"state"],[34,54,41,14],[34,56,41,40,"route"],[34,61,41,45],[34,62,41,46,"key"],[34,65,41,14],[34,71,41,55],[34,72,41,56],[34,73,41,4],[34,75,41,59],[34,121,41,4],[34,123,41,107,"route"],[34,128,41,112],[34,129,41,113,"key"],[34,132,41,4],[35,0,42,4],[35,10,42,10,"routes"],[35,16,42,16],[35,19,42,19,"state"],[35,24,42,24],[35,25,42,25,"routes"],[35,31,42,19],[35,32,42,32,"slice"],[35,37,42,19],[35,39,42,4],[36,0,43,4,"routes"],[36,6,43,4,"routes"],[36,12,43,10],[36,13,43,11,"push"],[36,17,43,4],[36,18,43,16,"route"],[36,23,43,4],[37,0,44,4],[37,45,44,16,"state"],[37,50,44,4],[38,0,45,6,"index"],[38,8,45,6,"index"],[38,13,45,11],[38,15,45,13,"routes"],[38,21,45,19],[38,22,45,20,"length"],[38,28,45,13],[38,31,45,29],[38,32,44,4],[39,0,46,6,"routes"],[39,8,46,6,"routes"],[39,14,46,12],[39,16,46,6,"routes"],[40,0,44,4],[41,0,48,3],[41,5,11,19],[42,0,55,2,"pop"],[42,4,55,2,"pop"],[42,7,11,19],[42,22,55,6,"state"],[42,27,11,19],[42,29,55,13],[43,0,56,4],[43,10,56,8,"state"],[43,15,56,13],[43,16,56,14,"index"],[43,21,56,8],[43,25,56,23],[43,26,56,4],[43,28,56,26],[44,0,58,6],[44,15,58,13,"state"],[44,20,58,6],[45,0,59,5],[47,0,61,4],[47,10,61,10,"routes"],[47,16,61,16],[47,19,61,19,"state"],[47,24,61,24],[47,25,61,25,"routes"],[47,31,61,19],[47,32,61,32,"slice"],[47,37,61,19],[47,38,61,38],[47,39,61,19],[47,41,61,41],[47,42,61,42],[47,43,61,19],[47,44,61,4],[48,0,62,4],[48,45,62,16,"state"],[48,50,62,4],[49,0,63,6,"index"],[49,8,63,6,"index"],[49,13,63,11],[49,15,63,13,"routes"],[49,21,63,19],[49,22,63,20,"length"],[49,28,63,13],[49,31,63,29],[49,32,62,4],[50,0,64,6,"routes"],[50,8,64,6,"routes"],[50,14,64,12],[50,16,64,6,"routes"],[51,0,62,4],[52,0,66,3],[52,5,11,19],[53,0,71,2,"jumpToIndex"],[53,4,71,2,"jumpToIndex"],[53,15,11,19],[53,38,71,14,"state"],[53,43,11,19],[53,45,71,21,"index"],[53,50,11,19],[53,52,71,28],[54,0,72,4],[54,10,72,8,"index"],[54,15,72,13],[54,20,72,18,"state"],[54,25,72,23],[54,26,72,24,"index"],[54,31,72,4],[54,33,72,31],[55,0,73,6],[55,15,73,13,"state"],[55,20,73,6],[56,0,74,5],[58,0,76,4],[58,30,76,14],[58,31,76,15],[58,32,76,16,"state"],[58,37,76,21],[58,38,76,22,"routes"],[58,44,76,16],[58,45,76,29,"index"],[58,50,76,16],[58,51,76,4],[58,53,76,37],[58,82,76,4],[58,84,76,68,"index"],[58,89,76,4],[59,0,77,4],[59,45,77,16,"state"],[59,50,77,4],[60,0,78,6,"index"],[60,8,78,6,"index"],[60,13,78,11],[60,15,78,6,"index"],[61,0,77,4],[62,0,80,3],[62,5,11,19],[63,0,85,2,"jumpTo"],[63,4,85,2,"jumpTo"],[63,10,11,19],[63,28,85,9,"state"],[63,33,11,19],[63,35,85,16,"key"],[63,38,11,19],[63,40,85,21],[64,0,86,4],[64,10,86,10,"index"],[64,15,86,15],[64,18,86,18,"StateUtils"],[64,28,86,28],[64,29,86,29,"indexOf"],[64,36,86,18],[64,37,86,37,"state"],[64,42,86,18],[64,44,86,44,"key"],[64,47,86,18],[64,48,86,4],[65,0,87,4],[65,30,87,14,"index"],[65,35,87,19],[65,40,87,24],[65,41,87,25],[65,42,87,4],[65,44,87,28],[65,81,87,4],[65,83,87,67,"key"],[65,86,87,4],[66,0,88,4],[66,13,88,11,"StateUtils"],[66,23,88,21],[66,24,88,22,"jumpToIndex"],[66,35,88,11],[66,36,88,34,"state"],[66,41,88,11],[66,43,88,41,"index"],[66,48,88,11],[66,49,88,4],[67,0,89,3],[67,5,11,19],[68,0,94,2,"back"],[68,4,94,2,"back"],[68,8,11,19],[68,24,94,7,"state"],[68,29,11,19],[68,31,94,14],[69,0,95,4],[69,10,95,10,"index"],[69,15,95,15],[69,18,95,18,"state"],[69,23,95,23],[69,24,95,24,"index"],[69,29,95,18],[69,32,95,32],[69,33,95,4],[70,0,96,4],[70,10,96,10,"route"],[70,15,96,15],[70,18,96,18,"state"],[70,23,96,23],[70,24,96,24,"routes"],[70,30,96,18],[70,31,96,31,"index"],[70,36,96,18],[70,37,96,4],[71,0,97,4],[71,13,97,11,"route"],[71,18,97,16],[71,21,97,19,"StateUtils"],[71,31,97,29],[71,32,97,30,"jumpToIndex"],[71,43,97,19],[71,44,97,42,"state"],[71,49,97,19],[71,51,97,49,"index"],[71,56,97,19],[71,57,97,16],[71,60,97,58,"state"],[71,65,97,4],[72,0,98,3],[72,5,11,19],[73,0,103,2,"forward"],[73,4,103,2,"forward"],[73,11,11,19],[73,30,103,10,"state"],[73,35,11,19],[73,37,103,17],[74,0,104,4],[74,10,104,10,"index"],[74,15,104,15],[74,18,104,18,"state"],[74,23,104,23],[74,24,104,24,"index"],[74,29,104,18],[74,32,104,32],[74,33,104,4],[75,0,105,4],[75,10,105,10,"route"],[75,15,105,15],[75,18,105,18,"state"],[75,23,105,23],[75,24,105,24,"routes"],[75,30,105,18],[75,31,105,31,"index"],[75,36,105,18],[75,37,105,4],[76,0,106,4],[76,13,106,11,"route"],[76,18,106,16],[76,21,106,19,"StateUtils"],[76,31,106,29],[76,32,106,30,"jumpToIndex"],[76,43,106,19],[76,44,106,42,"state"],[76,49,106,19],[76,51,106,49,"index"],[76,56,106,19],[76,57,106,16],[76,60,106,58,"state"],[76,65,106,4],[77,0,107,3],[77,5,11,19],[78,0,114,2,"replaceAndPrune"],[78,4,114,2,"replaceAndPrune"],[78,19,11,19],[78,46,114,18,"state"],[78,51,11,19],[78,53,114,25,"key"],[78,56,11,19],[78,58,114,30,"route"],[78,63,11,19],[78,65,114,37],[79,0,115,4],[79,10,115,10,"index"],[79,15,115,15],[79,18,115,18,"StateUtils"],[79,28,115,28],[79,29,115,29,"indexOf"],[79,36,115,18],[79,37,115,37,"state"],[79,42,115,18],[79,44,115,44,"key"],[79,47,115,18],[79,48,115,4],[80,0,116,4],[80,10,116,10,"replaced"],[80,18,116,18],[80,21,116,21,"StateUtils"],[80,31,116,31],[80,32,116,32,"replaceAtIndex"],[80,46,116,21],[80,47,116,47,"state"],[80,52,116,21],[80,54,116,54,"index"],[80,59,116,21],[80,61,116,61,"route"],[80,66,116,21],[80,67,116,4],[81,0,117,4],[81,45,117,16,"replaced"],[81,53,117,4],[82,0,118,6,"routes"],[82,8,118,6,"routes"],[82,14,118,12],[82,16,118,14,"replaced"],[82,24,118,22],[82,25,118,23,"routes"],[82,31,118,14],[82,32,118,30,"slice"],[82,37,118,14],[82,38,118,36],[82,39,118,14],[82,41,118,39,"index"],[82,46,118,44],[82,49,118,47],[82,50,118,14],[83,0,117,4],[84,0,120,3],[84,5,11,19],[85,0,129,2,"replaceAt"],[85,4,129,2,"replaceAt"],[85,13,11,19],[85,34,129,12,"state"],[85,39,11,19],[85,41,129,19,"key"],[85,44,11,19],[85,46,129,24,"route"],[85,51,11,19],[85,53,129,54],[86,0,129,54],[86,10,129,31,"preserveIndex"],[86,23,129,54],[86,94,129,47],[86,99,129,54],[87,0,130,4],[87,10,130,10,"index"],[87,15,130,15],[87,18,130,18,"StateUtils"],[87,28,130,28],[87,29,130,29,"indexOf"],[87,36,130,18],[87,37,130,37,"state"],[87,42,130,18],[87,44,130,44,"key"],[87,47,130,18],[87,48,130,4],[88,0,131,4],[88,10,131,10,"nextIndex"],[88,19,131,19],[88,22,131,22,"preserveIndex"],[88,35,131,35],[88,38,131,38,"state"],[88,43,131,43],[88,44,131,44,"index"],[88,49,131,35],[88,52,131,52,"index"],[88,57,131,4],[89,0,132,4],[89,10,132,8,"nextState"],[89,19,132,17],[89,22,132,20,"StateUtils"],[89,32,132,30],[89,33,132,31,"replaceAtIndex"],[89,47,132,20],[89,48,132,46,"state"],[89,53,132,20],[89,55,132,53,"index"],[89,60,132,20],[89,62,132,60,"route"],[89,67,132,20],[89,68,132,4],[90,0,133,4,"nextState"],[90,6,133,4,"nextState"],[90,15,133,13],[90,16,133,14,"index"],[90,21,133,4],[90,24,133,22,"nextIndex"],[90,33,133,4],[91,0,134,4],[91,13,134,11,"nextState"],[91,22,134,4],[92,0,135,3],[92,5,11,19],[93,0,142,2,"replaceAtIndex"],[93,4,142,2,"replaceAtIndex"],[93,18,11,19],[93,44,142,17,"state"],[93,49,11,19],[93,51,142,24,"index"],[93,56,11,19],[93,58,142,31,"route"],[93,63,11,19],[93,65,142,38],[94,0,143,4],[94,30,143,14],[94,31,143,15],[94,32,143,16,"state"],[94,37,143,21],[94,38,143,22,"routes"],[94,44,143,16],[94,45,143,29,"index"],[94,50,143,16],[94,51,143,4],[94,53,143,37],[94,94,143,4],[94,96,143,80,"index"],[94,101,143,4],[94,103,143,87,"route"],[94,108,143,92],[94,109,143,93,"key"],[94,112,143,4],[96,0,145,4],[96,10,145,8,"state"],[96,15,145,13],[96,16,145,14,"routes"],[96,22,145,8],[96,23,145,21,"index"],[96,28,145,8],[96,34,145,32,"route"],[96,39,145,8],[96,43,145,41,"index"],[96,48,145,46],[96,53,145,51,"state"],[96,58,145,56],[96,59,145,57,"index"],[96,64,145,4],[96,66,145,64],[97,0,146,6],[97,15,146,13,"state"],[97,20,146,6],[98,0,147,5],[100,0,149,4],[100,10,149,10,"routes"],[100,16,149,16],[100,19,149,19,"state"],[100,24,149,24],[100,25,149,25,"routes"],[100,31,149,19],[100,32,149,32,"slice"],[100,37,149,19],[100,39,149,4],[101,0,150,4,"routes"],[101,6,150,4,"routes"],[101,12,150,10],[101,13,150,11,"index"],[101,18,150,10],[101,19,150,4],[101,22,150,20,"route"],[101,27,150,4],[102,0,151,4],[102,45,151,16,"state"],[102,50,151,4],[103,0,152,6,"index"],[103,8,152,6,"index"],[103,13,152,11],[103,15,152,6,"index"],[103,20,151,4],[104,0,153,6,"routes"],[104,8,153,6,"routes"],[104,14,153,12],[104,16,153,6,"routes"],[105,0,151,4],[106,0,155,3],[106,5,11,19],[107,0,162,2,"reset"],[107,4,162,2,"reset"],[107,9,11,19],[107,26,162,8,"state"],[107,31,11,19],[107,33,162,15,"routes"],[107,39,11,19],[107,41,162,23,"index"],[107,46,11,19],[107,48,162,30],[108,0,163,4],[108,30,163,14,"routes"],[108,36,163,20],[108,37,163,21,"length"],[108,43,163,14],[108,47,163,31,"Array"],[108,52,163,36],[108,53,163,37,"isArray"],[108,60,163,31],[108,61,163,45,"routes"],[108,67,163,31],[108,68,163,4],[108,70,163,54],[108,97,163,4],[109,0,164,4],[109,10,164,10,"nextIndex"],[109,19,164,19],[109,22,164,22,"index"],[109,27,164,27],[109,32,164,32,"undefined"],[109,41,164,22],[109,44,164,44,"routes"],[109,50,164,50],[109,51,164,51,"length"],[109,57,164,44],[109,60,164,60],[109,61,164,22],[109,64,164,64,"index"],[109,69,164,4],[111,0,166,4],[111,10,166,8,"state"],[111,15,166,13],[111,16,166,14,"routes"],[111,22,166,8],[111,23,166,21,"length"],[111,29,166,8],[111,34,166,32,"routes"],[111,40,166,38],[111,41,166,39,"length"],[111,47,166,8],[111,51,166,49,"state"],[111,56,166,54],[111,57,166,55,"index"],[111,62,166,49],[111,67,166,65,"nextIndex"],[111,76,166,4],[111,78,166,76],[112,0,167,6],[112,12,167,12,"compare"],[112,19,167,19],[112,22,167,22],[112,31,167,12,"compare"],[112,38,167,22],[112,39,167,23,"route"],[112,44,167,22],[112,46,167,30,"ii"],[112,48,167,22],[113,0,167,22],[113,17,167,37,"routes"],[113,23,167,43],[113,24,167,44,"ii"],[113,26,167,43],[113,27,167,37],[113,32,167,52,"route"],[113,37,167,22],[114,0,167,22],[114,9,167,6],[116,0,169,6],[116,12,169,10,"state"],[116,17,169,15],[116,18,169,16,"routes"],[116,24,169,10],[116,25,169,23,"every"],[116,30,169,10],[116,31,169,29,"compare"],[116,38,169,10],[116,39,169,6],[116,41,169,39],[117,0,170,8],[117,17,170,15,"state"],[117,22,170,8],[118,0,171,7],[119,0,172,5],[121,0,174,4],[121,30,174,14],[121,31,174,15],[121,32,174,16,"routes"],[121,38,174,22],[121,39,174,23,"nextIndex"],[121,48,174,22],[121,49,174,4],[121,51,174,35],[121,78,174,4],[121,80,174,64,"nextIndex"],[121,89,174,4],[122,0,175,4],[122,45,175,16,"state"],[122,50,175,4],[123,0,176,6,"index"],[123,8,176,6,"index"],[123,13,176,11],[123,15,176,13,"nextIndex"],[123,24,175,4],[124,0,177,6,"routes"],[124,8,177,6,"routes"],[124,14,177,12],[124,16,177,6,"routes"],[125,0,175,4],[126,0,179,3],[127,0,11,19],[127,3,11,0],[128,17,182,15,"StateUtils"],[128,27]],"functionMap":{"names":["<global>","get","state.routes.find$argument_0","indexOf","state.routes.findIndex$argument_0","has","state.routes.some$argument_0","push","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaceAt","replaceAtIndex","reset","compare"],"mappings":"AAA;ECc;6BCC,0BD;GDC;EGM;kCCC,0BD;GHC;EKM;+BCC,0BD;GLC;EOO;GPQ;EQO;GRW;ESK;GTS;EUK;GVI;EWK;GXI;EYK;GZI;EaO;GbM;EcS;GdM;EeO;Gfa;EgBO;sBCK,mCD;GhBY"}},"type":"js/module"}]}