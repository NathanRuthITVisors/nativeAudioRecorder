{"dependencies":[{"name":"./_getAllKeys","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var getAllKeys = _$$_REQUIRE(_dependencyMap[0], \"./_getAllKeys\");\n\n  var COMPARE_PARTIAL_FLAG = 1;\n  var objectProto = Object.prototype;\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        objProps = getAllKeys(object),\n        objLength = objProps.length,\n        othProps = getAllKeys(other),\n        othLength = othProps.length;\n\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n\n    var index = objLength;\n\n    while (index--) {\n      var key = objProps[index];\n\n      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n        return false;\n      }\n    }\n\n    var objStacked = stack.get(object);\n    var othStacked = stack.get(other);\n\n    if (objStacked && othStacked) {\n      return objStacked == other && othStacked == object;\n    }\n\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n          othValue = other[key];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      }\n\n      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = false;\n        break;\n      }\n\n      skipCtor || (skipCtor = key == 'constructor');\n    }\n\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n          othCtor = other.constructor;\n\n      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n  }\n\n  module.exports = equalObjects;\n});","lineCount":73,"map":[[2,0,1,0],[2,6,1,4,"getAllKeys"],[2,16,1,14],[2,19,1,17,"require"],[2,30,1,24],[2,66,1,0],[4,0,4,0],[4,6,4,4,"COMPARE_PARTIAL_FLAG"],[4,26,4,24],[4,29,4,27],[4,30,4,0],[5,0,7,0],[5,6,7,4,"objectProto"],[5,17,7,15],[5,20,7,18,"Object"],[5,26,7,24],[5,27,7,25,"prototype"],[5,36,7,0],[6,0,10,0],[6,6,10,4,"hasOwnProperty"],[6,20,10,18],[6,23,10,21,"objectProto"],[6,34,10,32],[6,35,10,33,"hasOwnProperty"],[6,49,10,0],[8,0,25,0],[8,11,25,9,"equalObjects"],[8,23,25,0],[8,24,25,22,"object"],[8,30,25,0],[8,32,25,30,"other"],[8,37,25,0],[8,39,25,37,"bitmask"],[8,46,25,0],[8,48,25,46,"customizer"],[8,58,25,0],[8,60,25,58,"equalFunc"],[8,69,25,0],[8,71,25,69,"stack"],[8,76,25,0],[8,78,25,76],[9,0,26,2],[9,8,26,6,"isPartial"],[9,17,26,15],[9,20,26,18,"bitmask"],[9,27,26,25],[9,30,26,28,"COMPARE_PARTIAL_FLAG"],[9,50,26,2],[10,0,26,2],[10,8,27,6,"objProps"],[10,16,27,14],[10,19,27,17,"getAllKeys"],[10,29,27,27],[10,30,27,28,"object"],[10,36,27,27],[10,37,26,2],[11,0,26,2],[11,8,28,6,"objLength"],[11,17,28,15],[11,20,28,18,"objProps"],[11,28,28,26],[11,29,28,27,"length"],[11,35,26,2],[12,0,26,2],[12,8,29,6,"othProps"],[12,16,29,14],[12,19,29,17,"getAllKeys"],[12,29,29,27],[12,30,29,28,"other"],[12,35,29,27],[12,36,26,2],[13,0,26,2],[13,8,30,6,"othLength"],[13,17,30,15],[13,20,30,18,"othProps"],[13,28,30,26],[13,29,30,27,"length"],[13,35,26,2],[15,0,32,2],[15,8,32,6,"objLength"],[15,17,32,15],[15,21,32,19,"othLength"],[15,30,32,6],[15,34,32,32],[15,35,32,33,"isPartial"],[15,44,32,2],[15,46,32,44],[16,0,33,4],[16,13,33,11],[16,18,33,4],[17,0,34,3],[19,0,35,2],[19,8,35,6,"index"],[19,13,35,11],[19,16,35,14,"objLength"],[19,25,35,2],[21,0,36,2],[21,11,36,9,"index"],[21,16,36,14],[21,18,36,2],[21,20,36,18],[22,0,37,4],[22,10,37,8,"key"],[22,13,37,11],[22,16,37,14,"objProps"],[22,24,37,22],[22,25,37,23,"index"],[22,30,37,22],[22,31,37,4],[24,0,38,4],[24,10,38,8],[24,12,38,10,"isPartial"],[24,21,38,19],[24,24,38,22,"key"],[24,27,38,25],[24,31,38,29,"other"],[24,36,38,19],[24,39,38,37,"hasOwnProperty"],[24,53,38,51],[24,54,38,52,"call"],[24,58,38,37],[24,59,38,57,"other"],[24,64,38,37],[24,66,38,64,"key"],[24,69,38,37],[24,70,38,8],[24,71,38,4],[24,73,38,71],[25,0,39,6],[25,15,39,13],[25,20,39,6],[26,0,40,5],[27,0,41,3],[29,0,43,2],[29,8,43,6,"objStacked"],[29,18,43,16],[29,21,43,19,"stack"],[29,26,43,24],[29,27,43,25,"get"],[29,30,43,19],[29,31,43,29,"object"],[29,37,43,19],[29,38,43,2],[30,0,44,2],[30,8,44,6,"othStacked"],[30,18,44,16],[30,21,44,19,"stack"],[30,26,44,24],[30,27,44,25,"get"],[30,30,44,19],[30,31,44,29,"other"],[30,36,44,19],[30,37,44,2],[32,0,45,2],[32,8,45,6,"objStacked"],[32,18,45,16],[32,22,45,20,"othStacked"],[32,32,45,2],[32,34,45,32],[33,0,46,4],[33,13,46,11,"objStacked"],[33,23,46,21],[33,27,46,25,"other"],[33,32,46,11],[33,36,46,34,"othStacked"],[33,46,46,44],[33,50,46,48,"object"],[33,56,46,4],[34,0,47,3],[36,0,48,2],[36,8,48,6,"result"],[36,14,48,12],[36,17,48,15],[36,21,48,2],[37,0,49,2,"stack"],[37,4,49,2,"stack"],[37,9,49,7],[37,10,49,8,"set"],[37,13,49,2],[37,14,49,12,"object"],[37,20,49,2],[37,22,49,20,"other"],[37,27,49,2],[38,0,50,2,"stack"],[38,4,50,2,"stack"],[38,9,50,7],[38,10,50,8,"set"],[38,13,50,2],[38,14,50,12,"other"],[38,19,50,2],[38,21,50,19,"object"],[38,27,50,2],[39,0,52,2],[39,8,52,6,"skipCtor"],[39,16,52,14],[39,19,52,17,"isPartial"],[39,28,52,2],[41,0,53,2],[41,11,53,9],[41,13,53,11,"index"],[41,18,53,9],[41,21,53,19,"objLength"],[41,30,53,2],[41,32,53,30],[42,0,54,4,"key"],[42,6,54,4,"key"],[42,9,54,7],[42,12,54,10,"objProps"],[42,20,54,18],[42,21,54,19,"index"],[42,26,54,18],[42,27,54,4],[43,0,55,4],[43,10,55,8,"objValue"],[43,18,55,16],[43,21,55,19,"object"],[43,27,55,25],[43,28,55,26,"key"],[43,31,55,25],[43,32,55,4],[44,0,55,4],[44,10,56,8,"othValue"],[44,18,56,16],[44,21,56,19,"other"],[44,26,56,24],[44,27,56,25,"key"],[44,30,56,24],[44,31,55,4],[46,0,58,4],[46,10,58,8,"customizer"],[46,20,58,4],[46,22,58,20],[47,0,59,6],[47,12,59,10,"compared"],[47,20,59,18],[47,23,59,21,"isPartial"],[47,32,59,30],[47,35,60,10,"customizer"],[47,45,60,20],[47,46,60,21,"othValue"],[47,54,60,20],[47,56,60,31,"objValue"],[47,64,60,20],[47,66,60,41,"key"],[47,69,60,20],[47,71,60,46,"other"],[47,76,60,20],[47,78,60,53,"object"],[47,84,60,20],[47,86,60,61,"stack"],[47,91,60,20],[47,92,59,30],[47,95,61,10,"customizer"],[47,105,61,20],[47,106,61,21,"objValue"],[47,114,61,20],[47,116,61,31,"othValue"],[47,124,61,20],[47,126,61,41,"key"],[47,129,61,20],[47,131,61,46,"object"],[47,137,61,20],[47,139,61,54,"other"],[47,144,61,20],[47,146,61,61,"stack"],[47,151,61,20],[47,152,59,6],[48,0,62,5],[50,0,64,4],[50,10,64,8],[50,12,64,10,"compared"],[50,20,64,18],[50,25,64,23,"undefined"],[50,34,64,10],[50,37,65,13,"objValue"],[50,45,65,21],[50,50,65,26,"othValue"],[50,58,65,13],[50,62,65,38,"equalFunc"],[50,71,65,47],[50,72,65,48,"objValue"],[50,80,65,47],[50,82,65,58,"othValue"],[50,90,65,47],[50,92,65,68,"bitmask"],[50,99,65,47],[50,101,65,77,"customizer"],[50,111,65,47],[50,113,65,89,"stack"],[50,118,65,47],[50,119,64,10],[50,122,66,12,"compared"],[50,130,64,8],[50,131,64,4],[50,133,67,11],[51,0,68,6,"result"],[51,8,68,6,"result"],[51,14,68,12],[51,17,68,15],[51,22,68,6],[52,0,69,6],[53,0,70,5],[55,0,71,4,"skipCtor"],[55,6,71,4,"skipCtor"],[55,14,71,12],[55,19,71,17,"skipCtor"],[55,27,71,25],[55,30,71,28,"key"],[55,33,71,31],[55,37,71,35],[55,50,71,12],[55,51,71,4],[56,0,72,3],[58,0,73,2],[58,8,73,6,"result"],[58,14,73,12],[58,18,73,16],[58,19,73,17,"skipCtor"],[58,27,73,2],[58,29,73,27],[59,0,74,4],[59,10,74,8,"objCtor"],[59,17,74,15],[59,20,74,18,"object"],[59,26,74,24],[59,27,74,25,"constructor"],[59,38,74,4],[60,0,74,4],[60,10,75,8,"othCtor"],[60,17,75,15],[60,20,75,18,"other"],[60,25,75,23],[60,26,75,24,"constructor"],[60,37,74,4],[62,0,78,4],[62,10,78,8,"objCtor"],[62,17,78,15],[62,21,78,19,"othCtor"],[62,28,78,8],[62,32,79,9],[62,49,79,26,"object"],[62,55,79,9],[62,59,79,36],[62,76,79,53,"other"],[62,81,78,8],[62,85,80,8],[62,87,80,10],[62,94,80,17,"objCtor"],[62,101,80,10],[62,105,80,28],[62,115,80,10],[62,119,80,42,"objCtor"],[62,126,80,49],[62,138,80,61,"objCtor"],[62,145,80,10],[62,149,81,10],[62,156,81,17,"othCtor"],[62,163,81,10],[62,167,81,28],[62,177,80,10],[62,181,81,42,"othCtor"],[62,188,81,49],[62,200,81,61,"othCtor"],[62,207,80,8],[62,208,78,4],[62,210,81,71],[63,0,82,6,"result"],[63,8,82,6,"result"],[63,14,82,12],[63,17,82,15],[63,22,82,6],[64,0,83,5],[65,0,84,3],[67,0,85,2,"stack"],[67,4,85,2,"stack"],[67,9,85,7],[67,10,85,8],[67,18,85,7],[67,19,85,2],[67,20,85,18,"object"],[67,26,85,2],[68,0,86,2,"stack"],[68,4,86,2,"stack"],[68,9,86,7],[68,10,86,8],[68,18,86,7],[68,19,86,2],[68,20,86,18,"other"],[68,25,86,2],[69,0,87,2],[69,11,87,9,"result"],[69,17,87,2],[70,0,88,1],[72,0,90,0,"module"],[72,2,90,0,"module"],[72,8,90,6],[72,9,90,7,"exports"],[72,16,90,0],[72,19,90,17,"equalObjects"],[72,31,90,0]],"functionMap":{"names":["<global>","equalObjects"],"mappings":"AAA;ACwB;CD+D"}},"type":"js/module"}]}