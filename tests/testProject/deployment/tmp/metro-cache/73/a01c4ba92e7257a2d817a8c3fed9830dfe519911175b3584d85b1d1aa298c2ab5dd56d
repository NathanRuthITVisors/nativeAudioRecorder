{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireWildcard","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"path-to-regexp","data":{"isAsync":false}},{"name":"../NavigationActions","data":{"isAsync":false}},{"name":"../utils/invariant","data":{"isAsync":false}},{"name":"query-string","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireWildcard\");\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createPathParser = exports.urlToPathAndParams = exports.getParamsFromPath = void 0;\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _pathToRegexp = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], \"path-to-regexp\"));\n\n  var NavigationActions = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5], \"../NavigationActions\"));\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"../utils/invariant\"));\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var queryString = _$$_REQUIRE(_dependencyMap[7], \"query-string\");\n\n  var getParamsFromPath = function getParamsFromPath(inputParams, pathMatch, pathMatchKeys) {\n    var params = pathMatch.slice(1).reduce(function (paramsOut, matchResult, i) {\n      var key = pathMatchKeys[i];\n\n      if (!key || key.asterisk) {\n        return paramsOut;\n      }\n\n      var paramName = key.name;\n      var decodedMatchResult;\n\n      if (matchResult) {\n        try {\n          decodedMatchResult = decodeURIComponent(matchResult);\n        } catch (e) {}\n      }\n\n      paramsOut[paramName] = decodedMatchResult || matchResult;\n      return paramsOut;\n    }, _objectSpread({}, inputParams));\n    return params;\n  };\n\n  exports.getParamsFromPath = getParamsFromPath;\n\n  var getRestOfPath = function getRestOfPath(pathMatch, pathMatchKeys) {\n    var rest = pathMatch[pathMatchKeys.findIndex(function (k) {\n      return k.asterisk;\n    }) + 1];\n    return rest;\n  };\n\n  var determineDelimiter = function determineDelimiter(uri, uriPrefix) {\n    if (Array.isArray(uriPrefix)) {\n      if (uriPrefix.length === 1) return uriPrefix[0];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(uriPrefix), _step; !(_step = _iterator()).done;) {\n        var prefix = _step.value;\n        if (uri.startsWith(prefix)) return prefix;\n      }\n\n      return null;\n    }\n\n    return uriPrefix;\n  };\n\n  var urlToPathAndParams = function urlToPathAndParams(url, uriPrefix) {\n    var searchMatch = url.match(/^(.*)\\?(.*)$/);\n\n    var _ref = searchMatch || [null, url, {}],\n        _ref2 = (0, _slicedToArray2.default)(_ref, 3),\n        urlWithoutQuery = _ref2[1],\n        query = _ref2[2];\n\n    var params = queryString.parse(query);\n    var delimiter = determineDelimiter(urlWithoutQuery, uriPrefix) || '://';\n    var path = urlWithoutQuery.split(delimiter)[1];\n\n    if (path === undefined) {\n      path = urlWithoutQuery;\n    }\n\n    if (path === '/') {\n      path = '';\n    }\n\n    if (path[path.length - 1] === '/') {\n      path = path.slice(0, -1);\n    }\n\n    return {\n      path: path,\n      params: params\n    };\n  };\n\n  exports.urlToPathAndParams = urlToPathAndParams;\n\n  var createPathParser = function createPathParser(childRouters, routeConfigs, _ref3) {\n    var _ref3$paths = _ref3.paths,\n        pathConfigs = _ref3$paths === void 0 ? {} : _ref3$paths,\n        disableRouteNamePaths = _ref3.disableRouteNamePaths;\n    var pathsByRouteNames = {};\n    var paths = [];\n    Object.keys(childRouters).forEach(function (routeName) {\n      var pathPattern;\n\n      if (pathConfigs[routeName] !== undefined) {\n        pathPattern = pathConfigs[routeName];\n      } else {\n        pathPattern = routeConfigs[routeName].path;\n      }\n\n      if (pathPattern === undefined) {\n        pathPattern = disableRouteNamePaths ? null : routeName;\n      }\n\n      (0, _invariant.default)(pathPattern === null || typeof pathPattern === 'string', \"Route path for \".concat(routeName, \" must be specified as a string, or null.\"));\n      var isPathMatchable = pathPattern !== null;\n      var exactReKeys = [];\n      var exactRe = isPathMatchable ? (0, _pathToRegexp.default)(pathPattern, exactReKeys) : null;\n      var extendedPathReKeys = [];\n      var isWildcard = pathPattern === '' || !isPathMatchable;\n      var extendedPathRe = (0, _pathToRegexp.default)(isWildcard ? '*' : \"\".concat(pathPattern, \"/*\"), extendedPathReKeys);\n      pathsByRouteNames[routeName] = {\n        exactRe: exactRe,\n        exactReKeys: exactReKeys,\n        extendedPathRe: extendedPathRe,\n        extendedPathReKeys: extendedPathReKeys,\n        isWildcard: isWildcard,\n        toPath: pathPattern === null ? function () {\n          return '';\n        } : (0, _pathToRegexp.compile)(pathPattern)\n      };\n    });\n    paths = Object.entries(pathsByRouteNames);\n\n    var getActionForPathAndParams = function getActionForPathAndParams() {\n      var pathToResolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var inputParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(paths), _step2; !(_step2 = _iterator2()).done;) {\n        var _ref4 = _step2.value;\n\n        var _ref5 = (0, _slicedToArray2.default)(_ref4, 2);\n\n        var routeName = _ref5[0];\n        var path = _ref5[1];\n        var exactRe = path.exactRe,\n            exactReKeys = path.exactReKeys,\n            extendedPathRe = path.extendedPathRe,\n            extendedPathReKeys = path.extendedPathReKeys;\n        var childRouter = childRouters[routeName];\n        var exactMatch = exactRe && exactRe.exec(pathToResolve);\n\n        if (exactMatch && exactMatch.length) {\n          var _extendedMatch = extendedPathRe && extendedPathRe.exec(pathToResolve);\n\n          var childAction = null;\n\n          if (_extendedMatch && childRouter) {\n            var restOfPath = getRestOfPath(_extendedMatch, extendedPathReKeys);\n            childAction = childRouter.getActionForPathAndParams(restOfPath, inputParams);\n          }\n\n          return NavigationActions.navigate({\n            routeName: routeName,\n            params: getParamsFromPath(inputParams, exactMatch, exactReKeys),\n            action: childAction\n          });\n        }\n      }\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(paths), _step3; !(_step3 = _iterator3()).done;) {\n        var _ref6 = _step3.value;\n\n        var _ref7 = (0, _slicedToArray2.default)(_ref6, 2);\n\n        var _routeName = _ref7[0];\n        var _path = _ref7[1];\n        var _extendedPathRe = _path.extendedPathRe,\n            _extendedPathReKeys = _path.extendedPathReKeys;\n        var _childRouter = childRouters[_routeName];\n\n        var extendedMatch = _extendedPathRe && _extendedPathRe.exec(pathToResolve);\n\n        if (extendedMatch && extendedMatch.length) {\n          var _restOfPath = getRestOfPath(extendedMatch, _extendedPathReKeys);\n\n          var _childAction = null;\n\n          if (_childRouter) {\n            _childAction = _childRouter.getActionForPathAndParams(_restOfPath, inputParams);\n          }\n\n          if (!_childAction) {\n            continue;\n          }\n\n          return NavigationActions.navigate({\n            routeName: _routeName,\n            params: getParamsFromPath(inputParams, extendedMatch, _extendedPathReKeys),\n            action: _childAction\n          });\n        }\n      }\n\n      return null;\n    };\n\n    var getPathAndParamsForRoute = function getPathAndParamsForRoute(route) {\n      var routeName = route.routeName,\n          params = route.params;\n      var childRouter = childRouters[routeName];\n      var _pathsByRouteNames$ro = pathsByRouteNames[routeName],\n          toPath = _pathsByRouteNames$ro.toPath,\n          exactReKeys = _pathsByRouteNames$ro.exactReKeys;\n      var subPath = toPath(params);\n      var nonPathParams = {};\n\n      if (params) {\n        Object.keys(params).filter(function (paramName) {\n          return !exactReKeys.find(function (k) {\n            return k.name === paramName;\n          });\n        }).forEach(function (paramName) {\n          nonPathParams[paramName] = params[paramName];\n        });\n      }\n\n      if (childRouter) {\n        var child = childRouter.getPathAndParamsForState(route);\n        return {\n          path: subPath ? \"\".concat(subPath, \"/\").concat(child.path) : child.path,\n          params: child.params ? _objectSpread(_objectSpread({}, nonPathParams), child.params) : nonPathParams\n        };\n      }\n\n      return {\n        path: subPath,\n        params: nonPathParams\n      };\n    };\n\n    return {\n      getActionForPathAndParams: getActionForPathAndParams,\n      getPathAndParamsForRoute: getPathAndParamsForRoute\n    };\n  };\n\n  exports.createPathParser = createPathParser;\n});","lineCount":265,"map":[[15,0,2,0],[17,0,3,0],[19,0,4,0],[31,0,6,0],[31,6,6,6,"queryString"],[31,17,6,17],[31,20,6,20,"require"],[31,31,6,27],[31,66,6,0],[33,0,8,7],[33,6,8,13,"getParamsFromPath"],[33,23,8,30],[33,26,8,33],[33,35,8,13,"getParamsFromPath"],[33,52,8,33],[33,53,8,34,"inputParams"],[33,64,8,33],[33,66,8,47,"pathMatch"],[33,75,8,33],[33,77,8,58,"pathMatchKeys"],[33,90,8,33],[33,92,8,76],[34,0,9,2],[34,8,9,8,"params"],[34,14,9,14],[34,17,9,17,"pathMatch"],[34,26,9,26],[34,27,9,27,"slice"],[34,32,9,17],[34,33,9,33],[34,34,9,17],[34,36,9,36,"reduce"],[34,42,9,17],[34,43,10,2],[34,53,10,3,"paramsOut"],[34,62,10,2],[34,64,10,14,"matchResult"],[34,75,10,2],[34,77,10,27,"i"],[34,78,10,2],[34,80,10,33],[35,0,11,4],[35,10,11,10,"key"],[35,13,11,13],[35,16,11,16,"pathMatchKeys"],[35,29,11,29],[35,30,11,30,"i"],[35,31,11,29],[35,32,11,4],[37,0,13,4],[37,10,13,8],[37,11,13,9,"key"],[37,14,13,8],[37,18,13,16,"key"],[37,21,13,19],[37,22,13,20,"asterisk"],[37,30,13,4],[37,32,13,30],[38,0,14,6],[38,15,14,13,"paramsOut"],[38,24,14,6],[39,0,15,5],[41,0,17,4],[41,10,17,10,"paramName"],[41,19,17,19],[41,22,17,22,"key"],[41,25,17,25],[41,26,17,26,"name"],[41,30,17,4],[42,0,18,4],[42,10,18,8,"decodedMatchResult"],[42,28,18,4],[44,0,20,4],[44,10,20,8,"matchResult"],[44,21,20,4],[44,23,20,21],[45,0,21,6],[45,12,21,10],[46,0,22,8,"decodedMatchResult"],[46,10,22,8,"decodedMatchResult"],[46,28,22,26],[46,31,22,29,"decodeURIComponent"],[46,49,22,47],[46,50,22,48,"matchResult"],[46,61,22,47],[46,62,22,8],[47,0,23,7],[47,9,21,6],[47,10,23,8],[47,17,23,15,"e"],[47,18,23,8],[47,20,23,18],[47,21,24,7],[48,0,25,5],[50,0,27,4,"paramsOut"],[50,6,27,4,"paramsOut"],[50,15,27,13],[50,16,27,14,"paramName"],[50,25,27,13],[50,26,27,4],[50,29,27,27,"decodedMatchResult"],[50,47,27,45],[50,51,27,49,"matchResult"],[50,62,27,4],[51,0,28,4],[51,13,28,11,"paramsOut"],[51,22,28,4],[52,0,29,3],[52,5,9,17],[52,25,30,7,"inputParams"],[52,36,9,17],[52,38,9,2],[53,0,32,2],[53,11,32,9,"params"],[53,17,32,2],[54,0,33,1],[54,3,8,7],[58,0,35,0],[58,6,35,6,"getRestOfPath"],[58,19,35,19],[58,22,35,22],[58,31,35,6,"getRestOfPath"],[58,44,35,22],[58,45,35,23,"pathMatch"],[58,54,35,22],[58,56,35,34,"pathMatchKeys"],[58,69,35,22],[58,71,35,52],[59,0,36,2],[59,8,36,8,"rest"],[59,12,36,12],[59,15,36,15,"pathMatch"],[59,24,36,24],[59,25,36,25,"pathMatchKeys"],[59,38,36,38],[59,39,36,39,"findIndex"],[59,48,36,25],[59,49,36,49],[59,59,36,49,"k"],[59,60,36,50],[60,0,36,50],[60,13,36,54,"k"],[60,14,36,55],[60,15,36,56,"asterisk"],[60,23,36,50],[61,0,36,50],[61,5,36,25],[61,9,36,68],[61,10,36,24],[61,11,36,2],[62,0,37,2],[62,11,37,9,"rest"],[62,15,37,2],[63,0,38,1],[63,3,35,0],[65,0,40,0],[65,6,40,6,"determineDelimiter"],[65,24,40,24],[65,27,40,27],[65,36,40,6,"determineDelimiter"],[65,54,40,27],[65,55,40,28,"uri"],[65,58,40,27],[65,60,40,33,"uriPrefix"],[65,69,40,27],[65,71,40,47],[66,0,41,2],[66,8,41,6,"Array"],[66,13,41,11],[66,14,41,12,"isArray"],[66,21,41,6],[66,22,41,20,"uriPrefix"],[66,31,41,6],[66,32,41,2],[66,34,41,32],[67,0,42,4],[67,10,42,8,"uriPrefix"],[67,19,42,17],[67,20,42,18,"length"],[67,26,42,8],[67,31,42,29],[67,32,42,4],[67,34,42,32],[67,41,42,39,"uriPrefix"],[67,50,42,48],[67,51,42,49],[67,52,42,48],[67,53,42,32],[69,0,44,4],[69,59,44,23,"uriPrefix"],[69,68,44,4],[69,108,44,34],[70,0,44,34],[70,12,44,13,"prefix"],[70,18,44,34],[71,0,45,6],[71,12,45,10,"uri"],[71,15,45,13],[71,16,45,14,"startsWith"],[71,26,45,10],[71,27,45,25,"prefix"],[71,33,45,10],[71,34,45,6],[71,36,45,34],[71,43,45,41,"prefix"],[71,49,45,34],[72,0,46,5],[74,0,48,4],[74,13,48,11],[74,17,48,4],[75,0,49,3],[77,0,51,2],[77,11,51,9,"uriPrefix"],[77,20,51,2],[78,0,52,1],[78,3,40,0],[80,0,54,7],[80,6,54,13,"urlToPathAndParams"],[80,24,54,31],[80,27,54,34],[80,36,54,13,"urlToPathAndParams"],[80,54,54,34],[80,55,54,35,"url"],[80,58,54,34],[80,60,54,40,"uriPrefix"],[80,69,54,34],[80,71,54,54],[81,0,55,2],[81,8,55,8,"searchMatch"],[81,19,55,19],[81,22,55,22,"url"],[81,25,55,25],[81,26,55,26,"match"],[81,31,55,22],[81,32,55,32],[81,46,55,22],[81,47,55,2],[83,0,54,54],[83,15,56,37,"searchMatch"],[83,26,56,48],[83,30,56,52],[83,31,56,53],[83,35,56,52],[83,37,56,59,"url"],[83,40,56,52],[83,42,56,64],[83,44,56,52],[83,45,54,54],[84,0,54,54],[85,0,54,54],[85,8,56,11,"urlWithoutQuery"],[85,23,54,54],[86,0,54,54],[86,8,56,28,"query"],[86,13,54,54],[88,0,57,2],[88,8,57,8,"params"],[88,14,57,14],[88,17,57,17,"queryString"],[88,28,57,28],[88,29,57,29,"parse"],[88,34,57,17],[88,35,57,35,"query"],[88,40,57,17],[88,41,57,2],[89,0,58,2],[89,8,58,8,"delimiter"],[89,17,58,17],[89,20,58,20,"determineDelimiter"],[89,38,58,38],[89,39,58,39,"urlWithoutQuery"],[89,54,58,38],[89,56,58,56,"uriPrefix"],[89,65,58,38],[89,66,58,20],[89,70,58,70],[89,75,58,2],[90,0,59,2],[90,8,59,6,"path"],[90,12,59,10],[90,15,59,13,"urlWithoutQuery"],[90,30,59,28],[90,31,59,29,"split"],[90,36,59,13],[90,37,59,35,"delimiter"],[90,46,59,13],[90,48,59,46],[90,49,59,13],[90,50,59,2],[92,0,61,2],[92,8,61,6,"path"],[92,12,61,10],[92,17,61,15,"undefined"],[92,26,61,2],[92,28,61,26],[93,0,62,4,"path"],[93,6,62,4,"path"],[93,10,62,8],[93,13,62,11,"urlWithoutQuery"],[93,28,62,4],[94,0,63,3],[96,0,65,2],[96,8,65,6,"path"],[96,12,65,10],[96,17,65,15],[96,20,65,2],[96,22,65,20],[97,0,66,4,"path"],[97,6,66,4,"path"],[97,10,66,8],[97,13,66,11],[97,15,66,4],[98,0,67,3],[100,0,69,2],[100,8,69,6,"path"],[100,12,69,10],[100,13,69,11,"path"],[100,17,69,15],[100,18,69,16,"length"],[100,24,69,11],[100,27,69,25],[100,28,69,10],[100,29,69,6],[100,34,69,32],[100,37,69,2],[100,39,69,37],[101,0,70,4,"path"],[101,6,70,4,"path"],[101,10,70,8],[101,13,70,11,"path"],[101,17,70,15],[101,18,70,16,"slice"],[101,23,70,11],[101,24,70,22],[101,25,70,11],[101,27,70,25],[101,28,70,26],[101,29,70,11],[101,30,70,4],[102,0,71,3],[104,0,73,2],[104,11,73,9],[105,0,74,4,"path"],[105,6,74,4,"path"],[105,10,74,8],[105,12,74,4,"path"],[105,16,73,9],[106,0,75,4,"params"],[106,6,75,4,"params"],[106,12,75,10],[106,14,75,4,"params"],[107,0,73,9],[107,5,73,2],[108,0,77,1],[108,3,54,7],[112,0,78,7],[112,6,78,13,"createPathParser"],[112,22,78,29],[112,25,78,32],[112,34,78,13,"createPathParser"],[112,50,78,32],[112,51,78,33,"childRouters"],[112,63,78,32],[112,65,78,47,"routeConfigs"],[112,77,78,32],[112,86,81,6],[113,0,81,6],[113,28,79,2,"paths"],[113,33,81,6],[114,0,81,6],[114,8,79,9,"pathConfigs"],[114,19,81,6],[114,47,79,23],[114,49,81,6],[115,0,81,6],[115,8,80,2,"disableRouteNamePaths"],[115,29,81,6],[115,38,80,2,"disableRouteNamePaths"],[115,59,81,6],[116,0,82,2],[116,8,82,8,"pathsByRouteNames"],[116,25,82,25],[116,28,82,28],[116,30,82,2],[117,0,83,2],[117,8,83,6,"paths"],[117,13,83,11],[117,16,83,14],[117,18,83,2],[118,0,85,2,"Object"],[118,4,85,2,"Object"],[118,10,85,8],[118,11,85,9,"keys"],[118,15,85,2],[118,16,85,14,"childRouters"],[118,28,85,2],[118,30,85,28,"forEach"],[118,37,85,2],[118,38,85,36],[118,48,85,36,"routeName"],[118,57,85,45],[118,59,85,49],[119,0,86,4],[119,10,86,8,"pathPattern"],[119,21,86,4],[121,0,88,4],[121,10,88,8,"pathConfigs"],[121,21,88,19],[121,22,88,20,"routeName"],[121,31,88,19],[121,32,88,8],[121,37,88,35,"undefined"],[121,46,88,4],[121,48,88,46],[122,0,89,6,"pathPattern"],[122,8,89,6,"pathPattern"],[122,19,89,17],[122,22,89,20,"pathConfigs"],[122,33,89,31],[122,34,89,32,"routeName"],[122,43,89,31],[122,44,89,6],[123,0,90,5],[123,7,88,4],[123,13,90,11],[124,0,91,6,"pathPattern"],[124,8,91,6,"pathPattern"],[124,19,91,17],[124,22,91,20,"routeConfigs"],[124,34,91,32],[124,35,91,33,"routeName"],[124,44,91,32],[124,45,91,20],[124,46,91,44,"path"],[124,50,91,6],[125,0,92,5],[127,0,94,4],[127,10,94,8,"pathPattern"],[127,21,94,19],[127,26,94,24,"undefined"],[127,35,94,4],[127,37,94,35],[128,0,96,6,"pathPattern"],[128,8,96,6,"pathPattern"],[128,19,96,17],[128,22,96,20,"disableRouteNamePaths"],[128,43,96,41],[128,46,96,44],[128,50,96,41],[128,53,96,51,"routeName"],[128,62,96,6],[129,0,97,5],[131,0,99,4],[131,30,99,14,"pathPattern"],[131,41,99,25],[131,46,99,30],[131,50,99,14],[131,54,99,38],[131,61,99,45,"pathPattern"],[131,72,99,38],[131,77,99,61],[131,85,99,4],[131,87,99,71],[131,105,99,89,"concat"],[131,111,99,71],[131,112,99,96,"routeName"],[131,121,99,71],[131,123,99,107],[131,165,99,71],[131,166,99,4],[132,0,101,4],[132,10,101,10,"isPathMatchable"],[132,25,101,25],[132,28,101,28,"pathPattern"],[132,39,101,39],[132,44,101,44],[132,48,101,4],[133,0,103,4],[133,10,103,10,"exactReKeys"],[133,21,103,21],[133,24,103,24],[133,26,103,4],[134,0,104,4],[134,10,104,10,"exactRe"],[134,17,104,17],[134,20,104,20,"isPathMatchable"],[134,35,104,35],[134,38,104,38],[134,65,104,51,"pathPattern"],[134,76,104,38],[134,78,104,64,"exactReKeys"],[134,89,104,38],[134,90,104,35],[134,93,104,79],[134,97,104,4],[135,0,105,4],[135,10,105,10,"extendedPathReKeys"],[135,28,105,28],[135,31,105,31],[135,33,105,4],[136,0,106,4],[136,10,106,10,"isWildcard"],[136,20,106,20],[136,23,106,23,"pathPattern"],[136,34,106,34],[136,39,106,39],[136,41,106,23],[136,45,106,45],[136,46,106,46,"isPathMatchable"],[136,61,106,4],[137,0,107,4],[137,10,107,10,"extendedPathRe"],[137,24,107,24],[137,27,107,27],[137,54,107,40,"isWildcard"],[137,64,107,50],[137,67,107,53],[137,70,107,50],[137,73,107,59],[137,76,107,62,"concat"],[137,82,107,59],[137,83,107,69,"pathPattern"],[137,94,107,59],[137,96,107,82],[137,100,107,59],[137,101,107,27],[137,103,107,89,"extendedPathReKeys"],[137,121,107,27],[137,122,107,4],[138,0,108,4,"pathsByRouteNames"],[138,6,108,4,"pathsByRouteNames"],[138,23,108,21],[138,24,108,22,"routeName"],[138,33,108,21],[138,34,108,4],[138,37,108,35],[139,0,109,6,"exactRe"],[139,8,109,6,"exactRe"],[139,15,109,13],[139,17,109,6,"exactRe"],[139,24,108,35],[140,0,110,6,"exactReKeys"],[140,8,110,6,"exactReKeys"],[140,19,110,17],[140,21,110,6,"exactReKeys"],[140,32,108,35],[141,0,111,6,"extendedPathRe"],[141,8,111,6,"extendedPathRe"],[141,22,111,20],[141,24,111,6,"extendedPathRe"],[141,38,108,35],[142,0,112,6,"extendedPathReKeys"],[142,8,112,6,"extendedPathReKeys"],[142,26,112,24],[142,28,112,6,"extendedPathReKeys"],[142,46,108,35],[143,0,113,6,"isWildcard"],[143,8,113,6,"isWildcard"],[143,18,113,16],[143,20,113,6,"isWildcard"],[143,30,108,35],[144,0,114,6,"toPath"],[144,8,114,6,"toPath"],[144,14,114,12],[144,16,114,14,"pathPattern"],[144,27,114,25],[144,32,114,30],[144,36,114,14],[144,39,114,37],[145,0,114,37],[145,17,114,43],[145,19,114,37],[146,0,114,37],[146,9,114,14],[146,12,114,48],[146,39,114,56,"pathPattern"],[146,50,114,48],[147,0,108,35],[147,7,108,4],[148,0,116,3],[148,5,85,2],[149,0,117,2,"paths"],[149,4,117,2,"paths"],[149,9,117,7],[149,12,117,10,"Object"],[149,18,117,16],[149,19,117,17,"entries"],[149,26,117,10],[149,27,117,25,"pathsByRouteNames"],[149,44,117,10],[149,45,117,2],[151,0,119,2],[151,8,119,8,"getActionForPathAndParams"],[151,33,119,33],[151,36,119,36],[151,45,119,8,"getActionForPathAndParams"],[151,70,119,36],[151,73,119,78],[152,0,119,78],[152,10,119,37,"pathToResolve"],[152,23,119,78],[152,94,119,53],[152,96,119,78],[153,0,119,78],[153,10,119,57,"inputParams"],[153,21,119,78],[153,92,119,71],[153,94,119,78],[155,0,121,4],[155,60,121,36,"paths"],[155,65,121,4],[155,108,121,43],[156,0,121,43],[158,0,121,43],[160,0,121,43],[160,12,121,16,"routeName"],[160,21,121,43],[161,0,121,43],[161,12,121,27,"path"],[161,16,121,43],[162,0,121,43],[162,12,123,8,"exactRe"],[162,19,121,43],[162,22,127,10,"path"],[162,26,121,43],[162,27,123,8,"exactRe"],[162,34,121,43],[163,0,121,43],[163,12,124,8,"exactReKeys"],[163,23,121,43],[163,26,127,10,"path"],[163,30,121,43],[163,31,124,8,"exactReKeys"],[163,42,121,43],[164,0,121,43],[164,12,125,8,"extendedPathRe"],[164,26,121,43],[164,29,127,10,"path"],[164,33,121,43],[164,34,125,8,"extendedPathRe"],[164,48,121,43],[165,0,121,43],[165,12,126,8,"extendedPathReKeys"],[165,30,121,43],[165,33,127,10,"path"],[165,37,121,43],[165,38,126,8,"extendedPathReKeys"],[165,56,121,43],[166,0,128,6],[166,12,128,12,"childRouter"],[166,23,128,23],[166,26,128,26,"childRouters"],[166,38,128,38],[166,39,128,39,"routeName"],[166,48,128,38],[166,49,128,6],[167,0,129,6],[167,12,129,12,"exactMatch"],[167,22,129,22],[167,25,129,25,"exactRe"],[167,32,129,32],[167,36,129,36,"exactRe"],[167,43,129,43],[167,44,129,44,"exec"],[167,48,129,36],[167,49,129,49,"pathToResolve"],[167,62,129,36],[167,63,129,6],[169,0,131,6],[169,12,131,10,"exactMatch"],[169,22,131,20],[169,26,131,24,"exactMatch"],[169,36,131,34],[169,37,131,35,"length"],[169,43,131,6],[169,45,131,43],[170,0,132,8],[170,14,132,14,"extendedMatch"],[170,28,132,27],[170,31,132,30,"extendedPathRe"],[170,45,132,44],[170,49,132,48,"extendedPathRe"],[170,63,132,62],[170,64,132,63,"exec"],[170,68,132,48],[170,69,132,68,"pathToResolve"],[170,82,132,48],[170,83,132,8],[172,0,133,8],[172,14,133,12,"childAction"],[172,25,133,23],[172,28,133,26],[172,32,133,8],[174,0,135,8],[174,14,135,12,"extendedMatch"],[174,28,135,25],[174,32,135,29,"childRouter"],[174,43,135,8],[174,45,135,42],[175,0,136,10],[175,16,136,16,"restOfPath"],[175,26,136,26],[175,29,136,29,"getRestOfPath"],[175,42,136,42],[175,43,136,43,"extendedMatch"],[175,57,136,42],[175,59,136,58,"extendedPathReKeys"],[175,77,136,42],[175,78,136,10],[176,0,137,10,"childAction"],[176,12,137,10,"childAction"],[176,23,137,21],[176,26,137,24,"childRouter"],[176,37,137,35],[176,38,137,36,"getActionForPathAndParams"],[176,63,137,24],[176,64,137,62,"restOfPath"],[176,74,137,24],[176,76,137,74,"inputParams"],[176,87,137,24],[176,88,137,10],[177,0,138,9],[179,0,140,8],[179,17,140,15,"NavigationActions"],[179,34,140,32],[179,35,140,33,"navigate"],[179,43,140,15],[179,44,140,42],[180,0,141,10,"routeName"],[180,12,141,10,"routeName"],[180,21,141,19],[180,23,141,10,"routeName"],[180,32,140,42],[181,0,142,10,"params"],[181,12,142,10,"params"],[181,18,142,16],[181,20,142,18,"getParamsFromPath"],[181,37,142,35],[181,38,142,36,"inputParams"],[181,49,142,35],[181,51,142,49,"exactMatch"],[181,61,142,35],[181,63,142,61,"exactReKeys"],[181,74,142,35],[181,75,140,42],[182,0,143,10,"action"],[182,12,143,10,"action"],[182,18,143,16],[182,20,143,18,"childAction"],[183,0,140,42],[183,11,140,15],[183,12,140,8],[184,0,145,7],[185,0,146,5],[187,0,148,4],[187,60,148,36,"paths"],[187,65,148,4],[187,108,148,43],[188,0,148,43],[190,0,148,43],[192,0,148,43],[192,12,148,16,"routeName"],[192,22,148,43],[193,0,148,43],[193,12,148,27,"path"],[193,17,148,43],[194,0,148,43],[194,12,150,8,"extendedPathRe"],[194,27,148,43],[194,30,152,10,"path"],[194,35,148,43],[194,36,150,8,"extendedPathRe"],[194,50,148,43],[195,0,148,43],[195,12,151,8,"extendedPathReKeys"],[195,31,148,43],[195,34,152,10,"path"],[195,39,148,43],[195,40,151,8,"extendedPathReKeys"],[195,58,148,43],[196,0,153,6],[196,12,153,12,"childRouter"],[196,24,153,23],[196,27,153,26,"childRouters"],[196,39,153,38],[196,40,153,39,"routeName"],[196,50,153,38],[196,51,153,6],[198,0,154,6],[198,12,154,12,"extendedMatch"],[198,25,154,25],[198,28,154,28,"extendedPathRe"],[198,43,154,42],[198,47,154,46,"extendedPathRe"],[198,62,154,60],[198,63,154,61,"exec"],[198,67,154,46],[198,68,154,66,"pathToResolve"],[198,81,154,46],[198,82,154,6],[200,0,156,6],[200,12,156,10,"extendedMatch"],[200,25,156,23],[200,29,156,27,"extendedMatch"],[200,42,156,40],[200,43,156,41,"length"],[200,49,156,6],[200,51,156,49],[201,0,157,8],[201,14,157,14,"restOfPath"],[201,25,157,24],[201,28,157,27,"getRestOfPath"],[201,41,157,40],[201,42,157,41,"extendedMatch"],[201,55,157,40],[201,57,157,56,"extendedPathReKeys"],[201,76,157,40],[201,77,157,8],[203,0,158,8],[203,14,158,12,"childAction"],[203,26,158,23],[203,29,158,26],[203,33,158,8],[205,0,160,8],[205,14,160,12,"childRouter"],[205,26,160,8],[205,28,160,25],[206,0,161,10,"childAction"],[206,12,161,10,"childAction"],[206,24,161,21],[206,27,161,24,"childRouter"],[206,39,161,35],[206,40,161,36,"getActionForPathAndParams"],[206,65,161,24],[206,66,161,62,"restOfPath"],[206,77,161,24],[206,79,161,74,"inputParams"],[206,90,161,24],[206,91,161,10],[207,0,162,9],[209,0,164,8],[209,14,164,12],[209,15,164,13,"childAction"],[209,27,164,8],[209,29,164,26],[210,0,165,10],[211,0,166,9],[213,0,168,8],[213,17,168,15,"NavigationActions"],[213,34,168,32],[213,35,168,33,"navigate"],[213,43,168,15],[213,44,168,42],[214,0,169,10,"routeName"],[214,12,169,10,"routeName"],[214,21,169,19],[214,23,169,10,"routeName"],[214,33,168,42],[215,0,170,10,"params"],[215,12,170,10,"params"],[215,18,170,16],[215,20,170,18,"getParamsFromPath"],[215,37,170,35],[215,38,170,36,"inputParams"],[215,49,170,35],[215,51,170,49,"extendedMatch"],[215,64,170,35],[215,66,170,64,"extendedPathReKeys"],[215,85,170,35],[215,86,168,42],[216,0,171,10,"action"],[216,12,171,10,"action"],[216,18,171,16],[216,20,171,18,"childAction"],[217,0,168,42],[217,11,168,15],[217,12,168,8],[218,0,173,7],[219,0,174,5],[221,0,176,4],[221,13,176,11],[221,17,176,4],[222,0,177,3],[222,5,119,2],[224,0,179,2],[224,8,179,8,"getPathAndParamsForRoute"],[224,32,179,32],[224,35,179,35],[224,44,179,8,"getPathAndParamsForRoute"],[224,68,179,35],[224,69,179,35,"route"],[224,74,179,40],[224,76,179,44],[225,0,179,44],[225,10,181,6,"routeName"],[225,19,179,44],[225,22,183,8,"route"],[225,27,179,44],[225,28,181,6,"routeName"],[225,37,179,44],[226,0,179,44],[226,10,182,6,"params"],[226,16,179,44],[226,19,183,8,"route"],[226,24,179,44],[226,25,182,6,"params"],[226,31,179,44],[227,0,184,4],[227,10,184,10,"childRouter"],[227,21,184,21],[227,24,184,24,"childRouters"],[227,36,184,36],[227,37,184,37,"routeName"],[227,46,184,36],[227,47,184,4],[228,0,179,44],[228,34,188,8,"pathsByRouteNames"],[228,51,188,25],[228,52,188,26,"routeName"],[228,61,188,25],[228,62,179,44],[229,0,179,44],[229,10,186,6,"toPath"],[229,16,179,44],[229,41,186,6,"toPath"],[229,47,179,44],[230,0,179,44],[230,10,187,6,"exactReKeys"],[230,21,179,44],[230,46,187,6,"exactReKeys"],[230,57,179,44],[231,0,189,4],[231,10,189,10,"subPath"],[231,17,189,17],[231,20,189,20,"toPath"],[231,26,189,26],[231,27,189,27,"params"],[231,33,189,26],[231,34,189,4],[232,0,190,4],[232,10,190,10,"nonPathParams"],[232,23,190,23],[232,26,190,26],[232,28,190,4],[234,0,192,4],[234,10,192,8,"params"],[234,16,192,4],[234,18,192,16],[235,0,193,6,"Object"],[235,8,193,6,"Object"],[235,14,193,12],[235,15,193,13,"keys"],[235,19,193,6],[235,20,193,18,"params"],[235,26,193,6],[235,28,193,26,"filter"],[235,34,193,6],[235,35,193,33],[235,45,193,33,"paramName"],[235,54,193,42],[236,0,193,42],[236,17,193,46],[236,18,193,47,"exactReKeys"],[236,29,193,58],[236,30,193,59,"find"],[236,34,193,47],[236,35,193,64],[236,45,193,64,"k"],[236,46,193,65],[237,0,193,65],[237,19,193,69,"k"],[237,20,193,70],[237,21,193,71,"name"],[237,25,193,69],[237,30,193,80,"paramName"],[237,39,193,65],[238,0,193,65],[238,11,193,47],[238,12,193,42],[239,0,193,42],[239,9,193,6],[239,11,193,92,"forEach"],[239,18,193,6],[239,19,193,100],[239,29,193,100,"paramName"],[239,38,193,109],[239,40,193,113],[240,0,194,8,"nonPathParams"],[240,10,194,8,"nonPathParams"],[240,23,194,21],[240,24,194,22,"paramName"],[240,33,194,21],[240,34,194,8],[240,37,194,35,"params"],[240,43,194,41],[240,44,194,42,"paramName"],[240,53,194,41],[240,54,194,8],[241,0,195,7],[241,9,193,6],[242,0,196,5],[244,0,198,4],[244,10,198,8,"childRouter"],[244,21,198,4],[244,23,198,21],[245,0,201,6],[245,12,201,12,"child"],[245,17,201,17],[245,20,201,20,"childRouter"],[245,31,201,31],[245,32,201,32,"getPathAndParamsForState"],[245,56,201,20],[245,57,201,57,"route"],[245,62,201,20],[245,63,201,6],[246,0,202,6],[246,15,202,13],[247,0,203,8,"path"],[247,10,203,8,"path"],[247,14,203,12],[247,16,203,14,"subPath"],[247,23,203,21],[247,26,203,24],[247,29,203,27,"concat"],[247,35,203,24],[247,36,203,34,"subPath"],[247,43,203,24],[247,45,203,43],[247,48,203,24],[247,50,203,48,"concat"],[247,56,203,24],[247,57,203,55,"child"],[247,62,203,60],[247,63,203,61,"path"],[247,67,203,24],[247,68,203,21],[247,71,203,69,"child"],[247,76,203,74],[247,77,203,75,"path"],[247,81,202,13],[248,0,204,8,"params"],[248,10,204,8,"params"],[248,16,204,14],[248,18,204,16,"child"],[248,23,204,21],[248,24,204,22,"params"],[248,30,204,16],[248,65,204,36,"nonPathParams"],[248,78,204,16],[248,81,205,13,"child"],[248,86,205,18],[248,87,205,19,"params"],[248,93,204,16],[248,97,206,12,"nonPathParams"],[249,0,202,13],[249,9,202,6],[250,0,208,5],[252,0,210,4],[252,13,210,11],[253,0,211,6,"path"],[253,8,211,6,"path"],[253,12,211,10],[253,14,211,12,"subPath"],[253,21,210,11],[254,0,212,6,"params"],[254,8,212,6,"params"],[254,14,212,12],[254,16,212,14,"nonPathParams"],[255,0,210,11],[255,7,210,4],[256,0,214,3],[256,5,179,2],[258,0,216,2],[258,11,216,9],[259,0,217,4,"getActionForPathAndParams"],[259,6,217,4,"getActionForPathAndParams"],[259,31,217,29],[259,33,217,4,"getActionForPathAndParams"],[259,58,216,9],[260,0,218,4,"getPathAndParamsForRoute"],[260,6,218,4,"getPathAndParamsForRoute"],[260,30,218,28],[260,32,218,4,"getPathAndParamsForRoute"],[261,0,216,9],[261,5,216,2],[262,0,220,1],[262,3,78,7]],"functionMap":{"names":["<global>","getParamsFromPath","pathMatch.slice.reduce$argument_0","getRestOfPath","pathMatchKeys.findIndex$argument_0","determineDelimiter","urlToPathAndParams","createPathParser","Object.keys.forEach$argument_0","<anonymous>","getActionForPathAndParams","getPathAndParamsForRoute","Object.keys.filter$argument_0","exactReKeys.find$argument_0","Object.keys.filter.forEach$argument_0"],"mappings":"AAA;iCCO;ECE;GDmB;CDI;sBGE;iDCC,eD;CHE;2BKE;CLY;kCME;CNuB;gCOC;oCCO;qCC6B,QD;GDE;oCGG;GH0D;mCIE;iCCc,+BC,yBD,CD,UG;OHE;GJmB;CPM"}},"type":"js/module"}]}