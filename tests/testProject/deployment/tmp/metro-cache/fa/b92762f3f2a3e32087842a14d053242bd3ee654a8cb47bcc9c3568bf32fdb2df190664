{"dependencies":[{"name":"./_SetCache","data":{"isAsync":false}},{"name":"./_arraySome","data":{"isAsync":false}},{"name":"./_cacheHas","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var SetCache = _$$_REQUIRE(_dependencyMap[0], \"./_SetCache\"),\n      arraySome = _$$_REQUIRE(_dependencyMap[1], \"./_arraySome\"),\n      cacheHas = _$$_REQUIRE(_dependencyMap[2], \"./_cacheHas\");\n\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        arrLength = array.length,\n        othLength = other.length;\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    }\n\n    var arrStacked = stack.get(array);\n    var othStacked = stack.get(other);\n\n    if (arrStacked && othStacked) {\n      return arrStacked == other && othStacked == array;\n    }\n\n    var index = -1,\n        result = true,\n        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n\n    while (++index < arrLength) {\n      var arrValue = array[index],\n          othValue = other[index];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n\n        result = false;\n        break;\n      }\n\n      if (seen) {\n        if (!arraySome(other, function (othValue, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n\n  module.exports = equalArrays;\n});","lineCount":69,"map":[[2,0,1,0],[2,6,1,4,"SetCache"],[2,14,1,12],[2,17,1,15,"require"],[2,28,1,22],[2,62,1,0],[3,0,1,0],[3,6,2,4,"arraySome"],[3,15,2,13],[3,18,2,16,"require"],[3,29,2,23],[3,64,1,0],[4,0,1,0],[4,6,3,4,"cacheHas"],[4,14,3,12],[4,17,3,15,"require"],[4,28,3,22],[4,62,1,0],[6,0,6,0],[6,6,6,4,"COMPARE_PARTIAL_FLAG"],[6,26,6,24],[6,29,6,27],[6,30,6,0],[7,0,6,0],[7,6,7,4,"COMPARE_UNORDERED_FLAG"],[7,28,7,26],[7,31,7,29],[7,32,6,0],[9,0,22,0],[9,11,22,9,"equalArrays"],[9,22,22,0],[9,23,22,21,"array"],[9,28,22,0],[9,30,22,28,"other"],[9,35,22,0],[9,37,22,35,"bitmask"],[9,44,22,0],[9,46,22,44,"customizer"],[9,56,22,0],[9,58,22,56,"equalFunc"],[9,67,22,0],[9,69,22,67,"stack"],[9,74,22,0],[9,76,22,74],[10,0,23,2],[10,8,23,6,"isPartial"],[10,17,23,15],[10,20,23,18,"bitmask"],[10,27,23,25],[10,30,23,28,"COMPARE_PARTIAL_FLAG"],[10,50,23,2],[11,0,23,2],[11,8,24,6,"arrLength"],[11,17,24,15],[11,20,24,18,"array"],[11,25,24,23],[11,26,24,24,"length"],[11,32,23,2],[12,0,23,2],[12,8,25,6,"othLength"],[12,17,25,15],[12,20,25,18,"other"],[12,25,25,23],[12,26,25,24,"length"],[12,32,23,2],[14,0,27,2],[14,8,27,6,"arrLength"],[14,17,27,15],[14,21,27,19,"othLength"],[14,30,27,6],[14,34,27,32],[14,36,27,34,"isPartial"],[14,45,27,43],[14,49,27,47,"othLength"],[14,58,27,56],[14,61,27,59,"arrLength"],[14,70,27,32],[14,71,27,2],[14,73,27,71],[15,0,28,4],[15,13,28,11],[15,18,28,4],[16,0,29,3],[18,0,31,2],[18,8,31,6,"arrStacked"],[18,18,31,16],[18,21,31,19,"stack"],[18,26,31,24],[18,27,31,25,"get"],[18,30,31,19],[18,31,31,29,"array"],[18,36,31,19],[18,37,31,2],[19,0,32,2],[19,8,32,6,"othStacked"],[19,18,32,16],[19,21,32,19,"stack"],[19,26,32,24],[19,27,32,25,"get"],[19,30,32,19],[19,31,32,29,"other"],[19,36,32,19],[19,37,32,2],[21,0,33,2],[21,8,33,6,"arrStacked"],[21,18,33,16],[21,22,33,20,"othStacked"],[21,32,33,2],[21,34,33,32],[22,0,34,4],[22,13,34,11,"arrStacked"],[22,23,34,21],[22,27,34,25,"other"],[22,32,34,11],[22,36,34,34,"othStacked"],[22,46,34,44],[22,50,34,48,"array"],[22,55,34,4],[23,0,35,3],[25,0,36,2],[25,8,36,6,"index"],[25,13,36,11],[25,16,36,14],[25,17,36,15],[25,18,36,2],[26,0,36,2],[26,8,37,6,"result"],[26,14,37,12],[26,17,37,15],[26,21,36,2],[27,0,36,2],[27,8,38,6,"seen"],[27,12,38,10],[27,15,38,14,"bitmask"],[27,22,38,21],[27,25,38,24,"COMPARE_UNORDERED_FLAG"],[27,47,38,13],[27,50,38,50],[27,54,38,54,"SetCache"],[27,62,38,50],[27,64,38,13],[27,67,38,65,"undefined"],[27,76,36,2],[28,0,40,2,"stack"],[28,4,40,2,"stack"],[28,9,40,7],[28,10,40,8,"set"],[28,13,40,2],[28,14,40,12,"array"],[28,19,40,2],[28,21,40,19,"other"],[28,26,40,2],[29,0,41,2,"stack"],[29,4,41,2,"stack"],[29,9,41,7],[29,10,41,8,"set"],[29,13,41,2],[29,14,41,12,"other"],[29,19,41,2],[29,21,41,19,"array"],[29,26,41,2],[31,0,44,2],[31,11,44,9],[31,13,44,11,"index"],[31,18,44,9],[31,21,44,19,"arrLength"],[31,30,44,2],[31,32,44,30],[32,0,45,4],[32,10,45,8,"arrValue"],[32,18,45,16],[32,21,45,19,"array"],[32,26,45,24],[32,27,45,25,"index"],[32,32,45,24],[32,33,45,4],[33,0,45,4],[33,10,46,8,"othValue"],[33,18,46,16],[33,21,46,19,"other"],[33,26,46,24],[33,27,46,25,"index"],[33,32,46,24],[33,33,45,4],[35,0,48,4],[35,10,48,8,"customizer"],[35,20,48,4],[35,22,48,20],[36,0,49,6],[36,12,49,10,"compared"],[36,20,49,18],[36,23,49,21,"isPartial"],[36,32,49,30],[36,35,50,10,"customizer"],[36,45,50,20],[36,46,50,21,"othValue"],[36,54,50,20],[36,56,50,31,"arrValue"],[36,64,50,20],[36,66,50,41,"index"],[36,71,50,20],[36,73,50,48,"other"],[36,78,50,20],[36,80,50,55,"array"],[36,85,50,20],[36,87,50,62,"stack"],[36,92,50,20],[36,93,49,30],[36,96,51,10,"customizer"],[36,106,51,20],[36,107,51,21,"arrValue"],[36,115,51,20],[36,117,51,31,"othValue"],[36,125,51,20],[36,127,51,41,"index"],[36,132,51,20],[36,134,51,48,"array"],[36,139,51,20],[36,141,51,55,"other"],[36,146,51,20],[36,148,51,62,"stack"],[36,153,51,20],[36,154,49,6],[37,0,52,5],[39,0,53,4],[39,10,53,8,"compared"],[39,18,53,16],[39,23,53,21,"undefined"],[39,32,53,4],[39,34,53,32],[40,0,54,6],[40,12,54,10,"compared"],[40,20,54,6],[40,22,54,20],[41,0,55,8],[42,0,56,7],[44,0,57,6,"result"],[44,8,57,6,"result"],[44,14,57,12],[44,17,57,15],[44,22,57,6],[45,0,58,6],[46,0,59,5],[48,0,61,4],[48,10,61,8,"seen"],[48,14,61,4],[48,16,61,14],[49,0,62,6],[49,12,62,10],[49,13,62,11,"arraySome"],[49,22,62,20],[49,23,62,21,"other"],[49,28,62,20],[49,30,62,28],[49,40,62,37,"othValue"],[49,48,62,28],[49,50,62,47,"othIndex"],[49,58,62,28],[49,60,62,57],[50,0,63,12],[50,14,63,16],[50,15,63,17,"cacheHas"],[50,23,63,25],[50,24,63,26,"seen"],[50,28,63,25],[50,30,63,32,"othIndex"],[50,38,63,25],[50,39,63,16],[50,44,64,17,"arrValue"],[50,52,64,25],[50,57,64,30,"othValue"],[50,65,64,17],[50,69,64,42,"equalFunc"],[50,78,64,51],[50,79,64,52,"arrValue"],[50,87,64,51],[50,89,64,62,"othValue"],[50,97,64,51],[50,99,64,72,"bitmask"],[50,106,64,51],[50,108,64,81,"customizer"],[50,118,64,51],[50,120,64,93,"stack"],[50,125,64,51],[50,126,63,16],[50,127,63,12],[50,129,64,102],[51,0,65,14],[51,19,65,21,"seen"],[51,23,65,25],[51,24,65,26,"push"],[51,28,65,21],[51,29,65,31,"othIndex"],[51,37,65,21],[51,38,65,14],[52,0,66,13],[53,0,67,11],[53,9,62,20],[53,10,62,6],[53,12,67,14],[54,0,68,8,"result"],[54,10,68,8,"result"],[54,16,68,14],[54,19,68,17],[54,24,68,8],[55,0,69,8],[56,0,70,7],[57,0,71,5],[57,7,61,4],[57,13,71,11],[57,17,71,15],[57,19,72,10,"arrValue"],[57,27,72,18],[57,32,72,23,"othValue"],[57,40,72,10],[57,44,73,12,"equalFunc"],[57,53,73,21],[57,54,73,22,"arrValue"],[57,62,73,21],[57,64,73,32,"othValue"],[57,72,73,21],[57,74,73,42,"bitmask"],[57,81,73,21],[57,83,73,51,"customizer"],[57,93,73,21],[57,95,73,63,"stack"],[57,100,73,21],[57,101,71,15],[57,102,71,11],[57,104,74,11],[58,0,75,6,"result"],[58,8,75,6,"result"],[58,14,75,12],[58,17,75,15],[58,22,75,6],[59,0,76,6],[60,0,77,5],[61,0,78,3],[63,0,79,2,"stack"],[63,4,79,2,"stack"],[63,9,79,7],[63,10,79,8],[63,18,79,7],[63,19,79,2],[63,20,79,18,"array"],[63,25,79,2],[64,0,80,2,"stack"],[64,4,80,2,"stack"],[64,9,80,7],[64,10,80,8],[64,18,80,7],[64,19,80,2],[64,20,80,18,"other"],[64,25,80,2],[65,0,81,2],[65,11,81,9,"result"],[65,17,81,2],[66,0,82,1],[68,0,84,0,"module"],[68,2,84,0,"module"],[68,8,84,6],[68,9,84,7,"exports"],[68,16,84,0],[68,19,84,17,"equalArrays"],[68,30,84,0]],"functionMap":{"names":["<global>","equalArrays","arraySome$argument_1"],"mappings":"AAA;ACqB;4BCwC;WDK;CDe"}},"type":"js/module"}]}