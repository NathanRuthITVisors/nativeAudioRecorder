{"dependencies":[{"name":"./maps/xml.json","data":{"isAsync":false}},{"name":"./maps/entities.json","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.escape = exports.encodeHTML = exports.encodeXML = void 0;\n\n  var xml_json_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0], \"./maps/xml.json\"));\n\n  var inverseXML = getInverseObj(xml_json_1.default);\n  var xmlReplacer = getInverseReplacer(inverseXML);\n  exports.encodeXML = getInverse(inverseXML, xmlReplacer);\n\n  var entities_json_1 = __importDefault(_$$_REQUIRE(_dependencyMap[1], \"./maps/entities.json\"));\n\n  var inverseHTML = getInverseObj(entities_json_1.default);\n  var htmlReplacer = getInverseReplacer(inverseHTML);\n  exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\n\n  function getInverseObj(obj) {\n    return Object.keys(obj).sort().reduce(function (inverse, name) {\n      inverse[obj[name]] = \"&\" + name + \";\";\n      return inverse;\n    }, {});\n  }\n\n  function getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n      var k = _a[_i];\n\n      if (k.length === 1) {\n        single.push(\"\\\\\" + k);\n      } else {\n        multiple.push(k);\n      }\n    }\n\n    single.sort();\n\n    for (var start = 0; start < single.length - 1; start++) {\n      var end = start;\n\n      while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n        end += 1;\n      }\n\n      var count = 1 + end - start;\n      if (count < 3) continue;\n      single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n  }\n\n  var reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\n\n  function singleCharReplacer(c) {\n    return \"&#x\" + c.codePointAt(0).toString(16).toUpperCase() + \";\";\n  }\n\n  function getInverse(inverse, re) {\n    return function (data) {\n      return data.replace(re, function (name) {\n        return inverse[name];\n      }).replace(reNonASCII, singleCharReplacer);\n    };\n  }\n\n  var reXmlChars = getInverseReplacer(inverseXML);\n\n  function escape(data) {\n    return data.replace(reXmlChars, singleCharReplacer).replace(reNonASCII, singleCharReplacer);\n  }\n\n  exports.escape = escape;\n});","lineCount":87,"map":[[2,0,1,0],[4,0,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,32,2,31],[4,37,2,36,"__importDefault"],[4,52,2,22],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,56],[4,71,2,71],[5,0,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,11],[5,35,3,37,"mod"],[5,38,3,11],[5,41,3,43],[6,0,3,45],[6,17,3,56,"mod"],[7,0,3,43],[7,5,3,4],[8,0,4,1],[8,3,2,0],[10,0,5,0,"Object"],[10,2,5,0,"Object"],[10,8,5,6],[10,9,5,7,"defineProperty"],[10,23,5,0],[10,24,5,22,"exports"],[10,31,5,0],[10,33,5,31],[10,45,5,0],[10,47,5,45],[11,0,5,47,"value"],[11,4,5,47,"value"],[11,9,5,52],[11,11,5,54],[12,0,5,45],[12,3,5,0],[13,0,6,0,"exports"],[13,2,6,0,"exports"],[13,9,6,7],[13,10,6,8,"escape"],[13,16,6,0],[13,19,6,17,"exports"],[13,26,6,24],[13,27,6,25,"encodeHTML"],[13,37,6,17],[13,40,6,38,"exports"],[13,47,6,45],[13,48,6,46,"encodeXML"],[13,57,6,38],[13,60,6,58],[13,65,6,63],[13,66,6,0],[15,0,7,0],[15,6,7,4,"xml_json_1"],[15,16,7,14],[15,19,7,17,"__importDefault"],[15,34,7,32],[15,35,7,33,"require"],[15,46,7,40],[15,84,7,32],[15,85,7,0],[17,0,8,0],[17,6,8,4,"inverseXML"],[17,16,8,14],[17,19,8,17,"getInverseObj"],[17,32,8,30],[17,33,8,31,"xml_json_1"],[17,43,8,41],[17,44,8,42,"default"],[17,51,8,30],[17,52,8,0],[18,0,9,0],[18,6,9,4,"xmlReplacer"],[18,17,9,15],[18,20,9,18,"getInverseReplacer"],[18,38,9,36],[18,39,9,37,"inverseXML"],[18,49,9,36],[18,50,9,0],[19,0,10,0,"exports"],[19,2,10,0,"exports"],[19,9,10,7],[19,10,10,8,"encodeXML"],[19,19,10,0],[19,22,10,20,"getInverse"],[19,32,10,30],[19,33,10,31,"inverseXML"],[19,43,10,30],[19,45,10,43,"xmlReplacer"],[19,56,10,30],[19,57,10,0],[21,0,11,0],[21,6,11,4,"entities_json_1"],[21,21,11,19],[21,24,11,22,"__importDefault"],[21,39,11,37],[21,40,11,38,"require"],[21,51,11,45],[21,94,11,37],[21,95,11,0],[23,0,12,0],[23,6,12,4,"inverseHTML"],[23,17,12,15],[23,20,12,18,"getInverseObj"],[23,33,12,31],[23,34,12,32,"entities_json_1"],[23,49,12,47],[23,50,12,48,"default"],[23,57,12,31],[23,58,12,0],[24,0,13,0],[24,6,13,4,"htmlReplacer"],[24,18,13,16],[24,21,13,19,"getInverseReplacer"],[24,39,13,37],[24,40,13,38,"inverseHTML"],[24,51,13,37],[24,52,13,0],[25,0,14,0,"exports"],[25,2,14,0,"exports"],[25,9,14,7],[25,10,14,8,"encodeHTML"],[25,20,14,0],[25,23,14,21,"getInverse"],[25,33,14,31],[25,34,14,32,"inverseHTML"],[25,45,14,31],[25,47,14,45,"htmlReplacer"],[25,59,14,31],[25,60,14,0],[27,0,15,0],[27,11,15,9,"getInverseObj"],[27,24,15,0],[27,25,15,23,"obj"],[27,28,15,0],[27,30,15,28],[28,0,16,4],[28,11,16,11,"Object"],[28,17,16,17],[28,18,16,18,"keys"],[28,22,16,11],[28,23,16,23,"obj"],[28,26,16,11],[28,28,17,9,"sort"],[28,32,16,11],[28,35,18,9,"reduce"],[28,41,16,11],[28,42,18,16],[28,52,18,26,"inverse"],[28,59,18,16],[28,61,18,35,"name"],[28,65,18,16],[28,67,18,41],[29,0,19,8,"inverse"],[29,6,19,8,"inverse"],[29,13,19,15],[29,14,19,16,"obj"],[29,17,19,19],[29,18,19,20,"name"],[29,22,19,19],[29,23,19,15],[29,24,19,8],[29,27,19,29],[29,33,19,35,"name"],[29,37,19,29],[29,40,19,42],[29,43,19,8],[30,0,20,8],[30,13,20,15,"inverse"],[30,20,20,8],[31,0,21,5],[31,5,16,11],[31,7,21,7],[31,9,16,11],[31,10,16,4],[32,0,22,1],[34,0,23,0],[34,11,23,9,"getInverseReplacer"],[34,29,23,0],[34,30,23,28,"inverse"],[34,37,23,0],[34,39,23,37],[35,0,24,4],[35,8,24,8,"single"],[35,14,24,14],[35,17,24,17],[35,19,24,4],[36,0,25,4],[36,8,25,8,"multiple"],[36,16,25,16],[36,19,25,19],[36,21,25,4],[38,0,26,4],[38,9,26,9],[38,13,26,13,"_i"],[38,15,26,15],[38,18,26,18],[38,19,26,9],[38,21,26,21,"_a"],[38,23,26,23],[38,26,26,26,"Object"],[38,32,26,32],[38,33,26,33,"keys"],[38,37,26,26],[38,38,26,38,"inverse"],[38,45,26,26],[38,46,26,4],[38,48,26,48,"_i"],[38,50,26,50],[38,53,26,53,"_a"],[38,55,26,55],[38,56,26,56,"length"],[38,62,26,4],[38,64,26,64,"_i"],[38,66,26,66],[38,68,26,4],[38,70,26,70],[39,0,27,8],[39,10,27,12,"k"],[39,11,27,13],[39,14,27,16,"_a"],[39,16,27,18],[39,17,27,19,"_i"],[39,19,27,18],[39,20,27,8],[41,0,28,8],[41,10,28,12,"k"],[41,11,28,13],[41,12,28,14,"length"],[41,18,28,12],[41,23,28,25],[41,24,28,8],[41,26,28,28],[42,0,30,12,"single"],[42,8,30,12,"single"],[42,14,30,18],[42,15,30,19,"push"],[42,19,30,12],[42,20,30,24],[42,27,30,31,"k"],[42,28,30,12],[43,0,31,9],[43,7,28,8],[43,13,32,13],[44,0,34,12,"multiple"],[44,8,34,12,"multiple"],[44,16,34,20],[44,17,34,21,"push"],[44,21,34,12],[44,22,34,26,"k"],[44,23,34,12],[45,0,35,9],[46,0,36,5],[48,0,38,4,"single"],[48,4,38,4,"single"],[48,10,38,10],[48,11,38,11,"sort"],[48,15,38,4],[50,0,39,4],[50,9,39,9],[50,13,39,13,"start"],[50,18,39,18],[50,21,39,21],[50,22,39,4],[50,24,39,24,"start"],[50,29,39,29],[50,32,39,32,"single"],[50,38,39,38],[50,39,39,39,"length"],[50,45,39,32],[50,48,39,48],[50,49,39,4],[50,51,39,51,"start"],[50,56,39,56],[50,58,39,4],[50,60,39,60],[51,0,41,8],[51,10,41,12,"end"],[51,13,41,15],[51,16,41,18,"start"],[51,21,41,8],[53,0,42,8],[53,13,42,15,"end"],[53,16,42,18],[53,19,42,21,"single"],[53,25,42,27],[53,26,42,28,"length"],[53,32,42,21],[53,35,42,37],[53,36,42,15],[53,40,43,12,"single"],[53,46,43,18],[53,47,43,19,"end"],[53,50,43,18],[53,51,43,12],[53,52,43,24,"charCodeAt"],[53,62,43,12],[53,63,43,35],[53,64,43,12],[53,68,43,40],[53,69,43,12],[53,74,43,46,"single"],[53,80,43,52],[53,81,43,53,"end"],[53,84,43,56],[53,87,43,59],[53,88,43,52],[53,89,43,46],[53,90,43,62,"charCodeAt"],[53,100,43,46],[53,101,43,73],[53,102,43,46],[53,103,42,8],[53,105,43,77],[54,0,44,12,"end"],[54,8,44,12,"end"],[54,11,44,15],[54,15,44,19],[54,16,44,12],[55,0,45,9],[57,0,46,8],[57,10,46,12,"count"],[57,15,46,17],[57,18,46,20],[57,22,46,24,"end"],[57,25,46,20],[57,28,46,30,"start"],[57,33,46,8],[58,0,48,8],[58,10,48,12,"count"],[58,15,48,17],[58,18,48,20],[58,19,48,8],[58,21,49,12],[59,0,50,8,"single"],[59,6,50,8,"single"],[59,12,50,14],[59,13,50,15,"splice"],[59,19,50,8],[59,20,50,22,"start"],[59,25,50,8],[59,27,50,29,"count"],[59,32,50,8],[59,34,50,36,"single"],[59,40,50,42],[59,41,50,43,"start"],[59,46,50,42],[59,47,50,36],[59,50,50,52],[59,53,50,36],[59,56,50,58,"single"],[59,62,50,64],[59,63,50,65,"end"],[59,66,50,64],[59,67,50,8],[60,0,51,5],[62,0,52,4,"multiple"],[62,4,52,4,"multiple"],[62,12,52,12],[62,13,52,13,"unshift"],[62,20,52,4],[62,21,52,21],[62,27,52,27,"single"],[62,33,52,33],[62,34,52,34,"join"],[62,38,52,27],[62,39,52,39],[62,41,52,27],[62,42,52,21],[62,45,52,45],[62,48,52,4],[63,0,53,4],[63,11,53,11],[63,15,53,15,"RegExp"],[63,21,53,11],[63,22,53,22,"multiple"],[63,30,53,30],[63,31,53,31,"join"],[63,35,53,22],[63,36,53,36],[63,39,53,22],[63,40,53,11],[63,42,53,42],[63,45,53,11],[63,46,53,4],[64,0,54,1],[66,0,55,0],[66,6,55,4,"reNonASCII"],[66,16,55,14],[66,19,55,17],[66,156,55,0],[68,0,56,0],[68,11,56,9,"singleCharReplacer"],[68,29,56,0],[68,30,56,28,"c"],[68,31,56,0],[68,33,56,31],[69,0,58,4],[69,11,58,11],[69,19,58,19,"c"],[69,20,58,20],[69,21,58,21,"codePointAt"],[69,32,58,19],[69,33,58,33],[69,34,58,19],[69,36,58,36,"toString"],[69,44,58,19],[69,45,58,45],[69,47,58,19],[69,49,58,49,"toUpperCase"],[69,60,58,19],[69,62,58,11],[69,65,58,65],[69,68,58,4],[70,0,59,1],[72,0,60,0],[72,11,60,9,"getInverse"],[72,21,60,0],[72,22,60,20,"inverse"],[72,29,60,0],[72,31,60,29,"re"],[72,33,60,0],[72,35,60,33],[73,0,61,4],[73,11,61,11],[73,21,61,21,"data"],[73,25,61,11],[73,27,61,27],[74,0,62,8],[74,13,62,15,"data"],[74,17,62,19],[74,18,63,13,"replace"],[74,25,62,15],[74,26,63,21,"re"],[74,28,62,15],[74,30,63,25],[74,40,63,35,"name"],[74,44,63,25],[74,46,63,41],[75,0,63,43],[75,15,63,50,"inverse"],[75,22,63,57],[75,23,63,58,"name"],[75,27,63,57],[75,28,63,43],[76,0,63,66],[76,7,62,15],[76,9,64,13,"replace"],[76,16,62,15],[76,17,64,21,"reNonASCII"],[76,27,62,15],[76,29,64,33,"singleCharReplacer"],[76,47,62,15],[76,48,62,8],[77,0,65,5],[77,5,61,4],[78,0,66,1],[80,0,67,0],[80,6,67,4,"reXmlChars"],[80,16,67,14],[80,19,67,17,"getInverseReplacer"],[80,37,67,35],[80,38,67,36,"inverseXML"],[80,48,67,35],[80,49,67,0],[82,0,68,0],[82,11,68,9,"escape"],[82,17,68,0],[82,18,68,16,"data"],[82,22,68,0],[82,24,68,22],[83,0,69,4],[83,11,69,11,"data"],[83,15,69,15],[83,16,70,9,"replace"],[83,23,69,11],[83,24,70,17,"reXmlChars"],[83,34,69,11],[83,36,70,29,"singleCharReplacer"],[83,54,69,11],[83,56,71,9,"replace"],[83,63,69,11],[83,64,71,17,"reNonASCII"],[83,74,69,11],[83,76,71,29,"singleCharReplacer"],[83,94,69,11],[83,95,69,4],[84,0,72,1],[86,0,73,0,"exports"],[86,2,73,0,"exports"],[86,9,73,7],[86,10,73,8,"escape"],[86,16,73,0],[86,19,73,17,"escape"],[86,25,73,0]],"functionMap":{"names":["<global>","<anonymous>","getInverseObj","Object.keys.sort.reduce$argument_0","getInverseReplacer","singleCharReplacer","getInverse","data.replace$argument_1","escape"],"mappings":"AAA;wDCC;CDE;AEW;gBCG;KDG;CFC;AIC;CJ+B;AKE;CLG;AMC;WLC;yBME,yCN;KKE;CNC;AQE;CRI"}},"type":"js/module"}]}